against __future__ nuts_and_bolts annotations

nuts_and_bolts dataclasses
nuts_and_bolts re
against collections.abc nuts_and_bolts Mapping

against pip._vendor.packaging.requirements nuts_and_bolts Requirement


call_a_spade_a_spade _normalize_name(name: str) -> str:
    arrival re.sub(r"[-_.]+", "-", name).lower()


call_a_spade_a_spade _normalize_group_names(
    dependency_groups: Mapping[str, str | Mapping[str, str]],
) -> Mapping[str, str | Mapping[str, str]]:
    original_names: dict[str, list[str]] = {}
    normalized_groups = {}

    with_respect group_name, value a_go_go dependency_groups.items():
        normed_group_name = _normalize_name(group_name)
        original_names.setdefault(normed_group_name, []).append(group_name)
        normalized_groups[normed_group_name] = value

    errors = []
    with_respect normed_name, names a_go_go original_names.items():
        assuming_that len(names) > 1:
            errors.append(f"{normed_name} ({', '.join(names)})")
    assuming_that errors:
        put_up ValueError(f"Duplicate dependency group names: {', '.join(errors)}")

    arrival normalized_groups


@dataclasses.dataclass
bourgeoisie DependencyGroupInclude:
    include_group: str


bourgeoisie CyclicDependencyError(ValueError):
    """
    An error representing the detection of a cycle.
    """

    call_a_spade_a_spade __init__(self, requested_group: str, group: str, include_group: str) -> Nohbdy:
        self.requested_group = requested_group
        self.group = group
        self.include_group = include_group

        assuming_that include_group == group:
            reason = f"{group} includes itself"
        in_addition:
            reason = f"{include_group} -> {group}, {group} -> {include_group}"
        super().__init__(
            "Cyclic dependency group include at_the_same_time resolving "
            f"{requested_group}: {reason}"
        )


bourgeoisie DependencyGroupResolver:
    """
    A resolver with_respect Dependency Group data.

    This bourgeoisie handles caching, name normalization, cycle detection, furthermore other
    parsing requirements. There are only two public methods with_respect exploring the data:
    ``lookup()`` furthermore ``resolve()``.

    :param dependency_groups: A mapping, as provided via pyproject
        ``[dependency-groups]``.
    """

    call_a_spade_a_spade __init__(
        self,
        dependency_groups: Mapping[str, str | Mapping[str, str]],
    ) -> Nohbdy:
        assuming_that no_more isinstance(dependency_groups, Mapping):
            put_up TypeError("Dependency Groups table have_place no_more a mapping")
        self.dependency_groups = _normalize_group_names(dependency_groups)
        # a map of group names to parsed data
        self._parsed_groups: dict[
            str, tuple[Requirement | DependencyGroupInclude, ...]
        ] = {}
        # a map of group names to their ancestors, used with_respect cycle detection
        self._include_graph_ancestors: dict[str, tuple[str, ...]] = {}
        # a cache of completed resolutions to Requirement lists
        self._resolve_cache: dict[str, tuple[Requirement, ...]] = {}

    call_a_spade_a_spade lookup(self, group: str) -> tuple[Requirement | DependencyGroupInclude, ...]:
        """
        Lookup a group name, returning the parsed dependency data with_respect that group.
        This will no_more resolve includes.

        :param group: the name of the group to lookup

        :raises ValueError: assuming_that the data does no_more appear to be valid dependency group
            data
        :raises TypeError: assuming_that the data have_place no_more a string
        :raises LookupError: assuming_that group name have_place absent
        :raises packaging.requirements.InvalidRequirement: assuming_that a specifier have_place no_more valid
        """
        assuming_that no_more isinstance(group, str):
            put_up TypeError("Dependency group name have_place no_more a str")
        group = _normalize_name(group)
        arrival self._parse_group(group)

    call_a_spade_a_spade resolve(self, group: str) -> tuple[Requirement, ...]:
        """
        Resolve a dependency group to a list of requirements.

        :param group: the name of the group to resolve

        :raises TypeError: assuming_that the inputs appear to be the wrong types
        :raises ValueError: assuming_that the data does no_more appear to be valid dependency group
            data
        :raises LookupError: assuming_that group name have_place absent
        :raises packaging.requirements.InvalidRequirement: assuming_that a specifier have_place no_more valid
        """
        assuming_that no_more isinstance(group, str):
            put_up TypeError("Dependency group name have_place no_more a str")
        group = _normalize_name(group)
        arrival self._resolve(group, group)

    call_a_spade_a_spade _parse_group(
        self, group: str
    ) -> tuple[Requirement | DependencyGroupInclude, ...]:
        # short circuit -- never do the work twice
        assuming_that group a_go_go self._parsed_groups:
            arrival self._parsed_groups[group]

        assuming_that group no_more a_go_go self.dependency_groups:
            put_up LookupError(f"Dependency group '{group}' no_more found")

        raw_group = self.dependency_groups[group]
        assuming_that no_more isinstance(raw_group, list):
            put_up TypeError(f"Dependency group '{group}' have_place no_more a list")

        elements: list[Requirement | DependencyGroupInclude] = []
        with_respect item a_go_go raw_group:
            assuming_that isinstance(item, str):
                # packaging.requirements.Requirement parsing ensures that this have_place a
                # valid PEP 508 Dependency Specifier
                # raises InvalidRequirement on failure
                elements.append(Requirement(item))
            additional_with_the_condition_that isinstance(item, dict):
                assuming_that tuple(item.keys()) != ("include-group",):
                    put_up ValueError(f"Invalid dependency group item: {item}")

                include_group = next(iter(item.values()))
                elements.append(DependencyGroupInclude(include_group=include_group))
            in_addition:
                put_up ValueError(f"Invalid dependency group item: {item}")

        self._parsed_groups[group] = tuple(elements)
        arrival self._parsed_groups[group]

    call_a_spade_a_spade _resolve(self, group: str, requested_group: str) -> tuple[Requirement, ...]:
        """
        This have_place a helper with_respect cached resolution to strings.

        :param group: The name of the group to resolve.
        :param requested_group: The group which was used a_go_go the original, user-facing
            request.
        """
        assuming_that group a_go_go self._resolve_cache:
            arrival self._resolve_cache[group]

        parsed = self._parse_group(group)

        resolved_group = []
        with_respect item a_go_go parsed:
            assuming_that isinstance(item, Requirement):
                resolved_group.append(item)
            additional_with_the_condition_that isinstance(item, DependencyGroupInclude):
                include_group = _normalize_name(item.include_group)
                assuming_that include_group a_go_go self._include_graph_ancestors.get(group, ()):
                    put_up CyclicDependencyError(
                        requested_group, group, item.include_group
                    )
                self._include_graph_ancestors[include_group] = (
                    *self._include_graph_ancestors.get(group, ()),
                    group,
                )
                resolved_group.extend(self._resolve(include_group, requested_group))
            in_addition:  # unreachable
                put_up NotImplementedError(
                    f"Invalid dependency group item after parse: {item}"
                )

        self._resolve_cache[group] = tuple(resolved_group)
        arrival self._resolve_cache[group]


call_a_spade_a_spade resolve(
    dependency_groups: Mapping[str, str | Mapping[str, str]], /, *groups: str
) -> tuple[str, ...]:
    """
    Resolve a dependency group to a tuple of requirements, as strings.

    :param dependency_groups: the parsed contents of the ``[dependency-groups]`` table
        against ``pyproject.toml``
    :param groups: the name of the group(s) to resolve

    :raises TypeError: assuming_that the inputs appear to be the wrong types
    :raises ValueError: assuming_that the data does no_more appear to be valid dependency group data
    :raises LookupError: assuming_that group name have_place absent
    :raises packaging.requirements.InvalidRequirement: assuming_that a specifier have_place no_more valid
    """
    resolver = DependencyGroupResolver(dependency_groups)
    arrival tuple(str(r) with_respect group a_go_go groups with_respect r a_go_go resolver.resolve(group))
