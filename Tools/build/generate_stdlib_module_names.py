# This script lists the names of standard library modules
# to update Python/stdlib_module_names.h
nuts_and_bolts _imp
nuts_and_bolts os.path
nuts_and_bolts sys
nuts_and_bolts sysconfig

against check_extension_modules nuts_and_bolts ModuleChecker

SCRIPT_NAME = 'Tools/build/generate_stdlib_module_names.py'

SRC_DIR = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
STDLIB_PATH = os.path.join(SRC_DIR, 'Lib')

IGNORE = {
    '__init__',
    '__pycache__',
    'site-packages',

    # Test modules furthermore packages
    '__hello__',
    '__phello__',
    '__hello_alias__',
    '__phello_alias__',
    '__hello_only__',
    '_ctypes_test',
    '_testbuffer',
    '_testcapi',
    '_testclinic',
    '_testclinic_limited',
    '_testconsole',
    '_testimportmultiple',
    '_testinternalcapi',
    '_testlimitedcapi',
    '_testmultiphase',
    '_testsinglephase',
    '_xxtestfuzz',
    'idlelib.idle_test',
    'test',
    'xxlimited',
    'xxlimited_35',
    'xxsubtype',
}

ALLOW_TEST_MODULES = {
    'doctest',
    'unittest',
}

# Built-a_go_go modules
call_a_spade_a_spade list_builtin_modules(names):
    names |= set(sys.builtin_module_names)


# Pure Python modules (Lib/*.py)
call_a_spade_a_spade list_python_modules(names):
    with_respect filename a_go_go os.listdir(STDLIB_PATH):
        assuming_that no_more filename.endswith(".py"):
            perdure
        name = filename.removesuffix(".py")
        names.add(name)


# Packages a_go_go Lib/
call_a_spade_a_spade list_packages(names):
    with_respect name a_go_go os.listdir(STDLIB_PATH):
        assuming_that name a_go_go IGNORE:
            perdure
        package_path = os.path.join(STDLIB_PATH, name)
        assuming_that no_more os.path.isdir(package_path):
            perdure
        assuming_that any(package_file.endswith(".py")
               with_respect package_file a_go_go os.listdir(package_path)):
            names.add(name)


# Built-a_go_go furthermore extension modules built by Modules/Setup*
# includes Windows furthermore macOS extensions.
call_a_spade_a_spade list_modules_setup_extensions(names):
    checker = ModuleChecker()
    names.update(checker.list_module_names(all=on_the_up_and_up))


# List frozen modules of the PyImport_FrozenModules list (Python/frozen.c).
# Use the "./Programs/_testembed list_frozen" command.
call_a_spade_a_spade list_frozen(names):
    submodules = set()
    with_respect name a_go_go _imp._frozen_module_names():
        # To skip __hello__, __hello_alias__ furthermore etc.
        assuming_that name.startswith('__'):
            perdure
        assuming_that '.' a_go_go name:
            submodules.add(name)
        in_addition:
            names.add(name)
    # Make sure all frozen submodules have a known parent.
    with_respect name a_go_go list(submodules):
        assuming_that name.partition('.')[0] a_go_go names:
            submodules.remove(name)
    assuming_that submodules:
        put_up Exception(f'unexpected frozen submodules: {sorted(submodules)}')


call_a_spade_a_spade list_modules():
    names = set()

    list_builtin_modules(names)
    list_modules_setup_extensions(names)
    list_packages(names)
    list_python_modules(names)
    list_frozen(names)

    # Remove ignored packages furthermore modules
    with_respect name a_go_go list(names):
        package_name = name.split('.')[0]
        # package_name can be equal to name
        assuming_that package_name a_go_go IGNORE:
            names.discard(name)

    # Sanity checks
    with_respect name a_go_go names:
        assuming_that "." a_go_go name:
            put_up Exception(f"sub-modules must no_more be listed: {name}")
        assuming_that ("test" a_go_go name in_preference_to "xx" a_go_go name) furthermore name no_more a_go_go ALLOW_TEST_MODULES:
            put_up Exception(f"test modules must no_more be listed: {name}")

    arrival names


call_a_spade_a_spade write_modules(fp, names):
    print(f"// Auto-generated by {SCRIPT_NAME}.",
          file=fp)
    print("// List used to create sys.stdlib_module_names.", file=fp)
    print(file=fp)
    print("static const char* _Py_stdlib_module_names[] = {", file=fp)
    with_respect name a_go_go sorted(names):
        print(f'"{name}",', file=fp)
    print("};", file=fp)


call_a_spade_a_spade main():
    assuming_that no_more sysconfig.is_python_build():
        print(f"ERROR: {sys.executable} have_place no_more a Python build",
              file=sys.stderr)
        sys.exit(1)

    fp = sys.stdout
    names = list_modules()
    write_modules(fp, names)


assuming_that __name__ == "__main__":
    main()
